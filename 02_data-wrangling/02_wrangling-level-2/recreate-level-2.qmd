---
title: "Level 2 Data Wrangling: Recreate a gapminder Dataset"
---

# Objective

This advanced data transformation assignment challenges you to practice **complex data wrangling** techniques using the tidyverse ecosystem. You will work with the `gapminder` dataset, applying more sophisticated data manipulation skills with minimal guidance.

In this Level 2 Recreation assignment, you will load a built-in dataset then make changes to match the provided goal dataset. Few instructions are provided, challenging you to think critically and apply your problem solving skills to recreate the dataset independently.

You may additionally or alternatively complete the [Level 1 wrangling assignment](recreate-level-1.qmd), which uses a simpler goal dataframe and provides more detailed instructions.

# Setup

## Load libraries and set seed

```{r}
#| label: setup
 
library(tidyverse)
library(gapminder)
library(daff) # for diff_data()

if (!require("daff")) install.packages("daff")
require("daff")

set.seed(5678)
```

## Load your goal tibble to replicate

Run this chunk to see what your end product should look like.


```{r}

#| label: load-goal-tibble

##### DO NOT EDIT THIS CHUNK #####
## With the 1 exception of if you need to change the relative file path

gm.wrangled.goal <- read_csv("gm-wrangled-goal.csv", 
    col_types = "ccfiicddfidddill")


# View in console
gm.wrangled.goal 

```

Start by saving the `gapminder` dataset to a new tbl called `gm.wrangled`. You will then make changes to this tbl to match the goal dataset.

```{r}
#| label: load-starting-data

# create gm.wrangled
gm.wrangled <- gapminder

# View in console
gm.wrangled


```


Before you start making changes to the `gm.wrangled` dataset, identify the differences between the `gm.wrangled` and `gm.wrangled.goal` datasets. There are multiple ways to do this, including the `all.equal()` function and the `diff_data()` function from the `daff` package. In this case, I recommend trying out both. Think about what the advantages and disadvantages of each are. Which is easier for you to understand? Which is more sensitive? Which guides you to focus on meaningful differences?

```{r}
#| label: compare-datasets

# Compare datasets using all.equal(), diff_data(), or another method of your choice
diff_data(gm.wrangled, gm.wrangled.goal)

```



### Notes on comparisons 

The `all.equal()` function is extremely sensitive. It may identify differences in object attributes that are not actually problematic. You may need to do some manual inspection to determine if the differences are significant. The `diff_data()` function is more focused on the data itself, but it may not be as sensitive to differences in object attributes, which can be a strength or weakness. You'll have to decide. 

There are actually a few places where the goal dataset isn't ideal. You may want to consider whether you should try to match the goal dataset exactly or if you want to (deliberately and with clear explanation!) deviate from it in some ways. (Hint: there are at least a few improvements you could make regarding data types, and factors specifically.)



## Make a Plan 

Create a plan to address the differences between the `gm.wrangled` and `gm.wrangled.goal` datasets. What changes do you need to make? What functions will you use to make these changes?

  
  A. Filter the dataset to only keep the data of the year 1992, 1997, 2002, 2007 only (filter())
  B. Generate and transform variables
  1. Change the variable name "pop", "gdpPercap", and "lifeExp" to "population", "gdp_per_capita", and "life_expectancy"
  2. Generate the variable "country_abbrev" by taking the first three letters of the "country" variable (str_to_upper(); str_sub())
  3. Add the word "Region" to the end of the "continent" variable (str_c())
  4. Generate the variable "population_millions" by dividing "population" by 1,000,000  and adding " mil." to the end of the variable (str_c())
  5. Generate the variable "development_status" and "is.rich" based on the "gdp_per_capita" variable (case_when())
  6. Generate the variable "country_length" by counting the number of characters in the "country" variable (str_length())
  7. Generate the variable "econimic_score" by multipying "gdp_per_capita" by "life_expectancy" and then dividing by 10
  8. Generate the variable "continent_avg_life_exp" by calculating the average "life_expectancy" by "continent" (group_by(); mutate())
  C. Deal with the columns and life_expectancy and population
  1. Generate the variable "relative_life_expectancy" by calculating the value of "life_expectancy" divided by "continent_avg_life_exp". (group_by())
  2. Generate the variable "population_rank_in_continent" by ranking the "population" variable within each "continent" (group_by())
  2. Generate the variable "is_populous" based on the "population" variable (if_else())
  D. Reorder the columns and rows to match the goal dataset (select(); arrange())
  
  
### Suggested functions

If you need help getting started, consider using the following functions in your transformation pipeline:

- `mutate()`, `across()`
- `group_by()`, `ungroup()`, `filter()`, `arrange()`
- `separate_wider_delim()`
- `str_to_upper()`, `str_detect()`, `str_replace()`, `str_sub()`, `str_length()`
- `select()`, `rename()`, `relocate()`
- `replace_na()`
- `factor()`, `fct_relevel()`, `fct_recode()`
- `min_rank()`, `dense_rank()`, `row_number()`
- `case_when()`, `if_else()`

This list is neither exhaustive nor prescriptive. You can use any other functions you find helpful, and you don't need to use all of these functions to complete the assignment. Bear in mind that in order to meet course objectives, you should prioritize using tidyverse functions when possible. 

### Derived variables

You'll create multiple derived variables during this process. Many of them are not obvious; you'll need to puzzle some of them out. Think about what kind of information would be useful to have in the dataset and create variables that provide that information. If you don't quite understand a variable conceptually, you can try to reverse-engineer it from the data. If you're really stuck, that's ok. Add whatever code you can to get as close as possible, then add placeholder comments that describe what you think you're still missing.


# Transformation Challenges

Below are some loose, suggested categories of transformations you'll need to make to recreate the `gm.wrangled.goal` dataset. You may need to combine multiple steps to achieve the desired result. You don't need to stick to the breakdown of steps given below. Feel free to add more categories or subcategories as needed.

**Feeling stuck?** Try breaking down the problem into smaller parts. For example, if you're having trouble creating a new variable, try breaking it down into the steps you would need to take to create that variable. What columns would you need to reference? What functions would you need to use? What would the logic look like?

## Data Selection and Initial Manipulation

The chunk(s) in this category may include things like selecting and renaming columns, filtering rows, and handling missing data.

```{r}

#| label: initial-manipulation

# Data Selection and Initial Manipulation

#change the data types in gm.wrangled to match the data types in gm.wrangled.goal
gm.wrangled <- gm.wrangled%>%
  drop_na()%>% # Drop the missing values (although there is no need to do so -- just to meet the requirements of objective 10!)
  mutate(country = as.character(country),
         year = as.integer(year),
         pop = as.integer(pop),
         gdpPercap = as.double(gdpPercap),
         lifeExp = as.double(lifeExp))

gm.wrangled <- gm.wrangled%>%
  filter(year %in% c(1992, 1997, 2002, 2007))

#rename the variables to match the variable names in gm.wrangled.goal
gm.wrangled <- gm.wrangled%>%
  rename(population = pop, # Change the variable name "pop" to "population"
         gdp_per_capita = gdpPercap, # Change the variable name "gdpPercap" to "gdp_per_capita"
         life_expectancy = lifeExp) # Change the variable name "lifeExp" to "life_expectancy"

```


## Factor Manipulation

The chunk(s) in this category may include things like releveling factor variables, creating new factor variables, and implementing conditional factor transformations.

```{r}

#| label: factor-manipulation

# Factor Manipulation

gm.wrangled <- gm.wrangled %>%
  mutate(continent = recode_factor(continent, # Change the variable type of "continent" to factor
                                   "Asia" = "Asian Region",
                                   "Europe" = "European Region",
                                   "Africa" = "African Region",
                                   "Americas" = "Americas Region",
                                   "Oceania" = "Oceania Region")) # Recode the levels of the "continent" variable

gm.wrangled <- gm.wrangled %>%
         mutate(development_status = case_when(
           gdp_per_capita > 20000 ~ "High Income",
           gdp_per_capita < 20000 & gdp_per_capita >5000 ~ "Middle Income",
           gdp_per_capita < 5000 ~ "Low Income"
         ), # Generate the variable "development_status" based on the "gdp_per_capita" variable
         development_status = as.factor(development_status), # Change the variable type of "development_status" to factor
         development_status = fct_relevel(development_status, "High Income", "Middle Income", "Low Income")) # Relevel the levels of the "development_status" variable

gm.wrangled.factor <- gm.wrangled%>%
  mutate(continent = fct_collapse(continent,
                                  Europe_America = c("European Region", "Americas Region"),  
                                  Asia = "Asian Region",                  
                                  Oceania = "Oceania Region",                
                                  Africa = "African Region")) # Collapse the levels of the "continent" variable just to meet the requirements of objective 12
  
  
```


## String and Numeric Transformations

The chunk(s) in this category may include things like text manipulation, creating compound variables, and implementing mathematical transformations.

```{r}

#| label: string-numeric-transformations

# String and Numeric Transformations


gm.wrangled <- gm.wrangled%>% 
  mutate(country_abbrev = str_to_upper((str_sub(str_replace_all(country, " ", ""), 1, 3))), # Generate the variable "country_abbrev" by taking the first three letters of the "country" variable
         population_millions = str_c(round(population / 1000000, 2), " mil."), # Generate the variable "population_millions" by dividing "population" by 1,000,000 and adding " mil." to the end of the variable
         country_length = str_length(country), # Generate the variable "country_length" by counting the number of characters in the "country" variable
         is_rich = if_else(gdp_per_capita > 20000, TRUE, FALSE) # Generate the variable "is_rich” based on the "gdp_per_capita" variable
  )
        
```

## Complex Column Operations

The chunk(s) in this category may include things like generating new columns based on multiple existing columns, implementing window functions, and creating summary statistics within groups.

```{r}

#| label: complex-operations

# Complex Column Operations

# Generate a new column based on multiple existing columns
gm.wrangled$economic_score = gm.wrangled$gdp_per_capita*gm.wrangled$life_expectancy/10 # Generate the variable "econimic_score" by multipying "gdp_per_capita" by "life_expectancy" and then dividing by 10

#life expectancy [I tried to understand why there are several average life expectancy values for the same continent, but I couldn't find a reasonable explanation. Thus, I gemerate one continent_avg_life_exp for each continent, and use them to calculate relative_life_expectancy.]
gm.wrangled <- gm.wrangled%>%
  group_by(continent)%>%
  mutate(continent_avg_life_exp = mean(life_expectancy))%>% # Generate the variable "continent_avg_life_exp" by calculating the average "life_expectancy" by "continent"
  ungroup()%>%
  mutate(relative_life_expectancy = life_expectancy/continent_avg_life_exp) # Generate the variable "relative_life_expectancy" by calculating the value of "life_expectancy" divided by "continent_avg_life_exp"

#population rank in continent [I am confused with how the original variables were defined, which seems not to be based on the population size and doesn't make sense to me. Thus I've decided to generate my own variables.]
gm.wrangled <- gm.wrangled%>%
  group_by(continent, year)%>%
         mutate(population_rank_in_continent =  rank(desc(population)), # Generate the variable "population_rank_in_continent" by ranking the "population" variable within each "continent"
         is_populous = if_else(population > 100000000, TRUE, FALSE) # Generate the variable "is_populous" based on the "population" variable
  )


```

## Final Touches

The chunk(s) in this category may include things like final column reordering, sorting, and any other miscellaneous transformations.

```{r}

#| label: final-touches

# Final Touches

gm.wrangled <- gm.wrangled %>%
  select(country, country_abbrev, continent, year, population, population_millions,  
         gdp_per_capita, life_expectancy, development_status, country_length, economic_score, continent_avg_life_exp, relative_life_expectancy, population_rank_in_continent, is_rich, is_populous) # Select the columns in the order of the goal dataset 

gm.wrangled <- gm.wrangled %>%
  arrange(continent, year, desc(life_expectancy)) # Arrange the dataset by "country", "year", and "life_expectancy"


```

# Checkpoint: compare dataframes

Check whether your `gm.wrangled` dataframe is identical to the goal dataframe. Like before, you can use `all_equal()`, `diff_data()`, or another method of your choice.

```{r}

#| label: compare-dataframes-again

# Compare dataframes again

diff <- diff_data(gm.wrangled.goal, gm.wrangled)
render_diff(diff)

```

**QUESTION:** What differences remain between your `gm.wrangled` and `gm.wrangled.goal` datasets?

  1. Are there any differences you tried to solve but weren't able to? How far did you get? What do you think you're missing?
  2. Are there any differences that the `all.equal()` or `diff_data()` functions identified that you don't think are significant? What are they and what do they mean? Why do you believe they are non-essential?
  
<!-- Answer below -->
1. The values in the columns "continent_avg_life_exp", "relative_life_expectancy", "population_rank_in_continent", and "is populous" are different from the goal dataset. I didn't understand wht there are several average life expectancy values for the same continent. This is also why my values in "relative_life_expectancy" are also different from the goal ones. 
  I also didn't get how the values in "population_rank_in_continent" and "is_populous" were calculated. It seems that the they are not calculated based on the population size, but I haven't figured out the logic behind them.
2. There are no differences that the `diff_data()` functions identified that I don't think are significant.


# OPTIONAL: Unguided cleaning and transformation

*Optional:* If you have the time and interest, continue transforming this dataset as you please in a new dataframe called `gm.optional`. **DO NOT SAVE OVER YOUR `gm.wrangled` DATAFRAME.** Create new columns based on the existing ones, reformat strings, try your hand at a regex replacement, summarize by groups (factor levels), visualize a simple relationship, or anything else you can think of. You can do this in addition to or instead of the additional cleaning tasks above. 

You can do these transformations one pipe/chunk or several. Either way, include appropriate chunk labels as well as comments to explain your thought process and the steps you are taking. 
Beyond random transforms, try creating an additional transformation pipeline that generates insights about global trends, potentially involving:

  - Aggregating data at different levels
  - Calculating rolling averages
  - Creating interaction variables
  - Implementing more complex filtering strategies
  - Joining with other datasets (hint: figure out which columns are likely to align with other datasets you might find online)


```{r}

#| label: rename-me-to-something-sensible

#gm.optional <- gm.wrangled
  # your code here

```

# OPTIONAL: Export/write your data to .csv

If you would like to export your dataframe(s) to a .csv file, you can use the `write_csv()` function from the `readr` package. This is not required, but can demonstrate the skill.

```{r}
#| label: export-data

# Write gm.wrangled to a .csv file

write.csv(gm.wrangled, "gm_wrangled.csv", row.names = FALSE)

# Write gm.optional to a .csv file


```



# Submission & Assessment

Before submitting, double check that your `gm.wrangled` dataframe matches the `gm.wrangled.goal` dataframe using something like `all.equal()` or `diff_data()`. Remember that in this more complex recreation assignment, you may not be able to clear 100% of the differences you identify. You should aim to get as close as possible, and then address remaining discrepancies in the section above.

If you optionally chose to continue transforming, that should be a *different dataframe.* 

To submit:

1. Add & modify the `assessment.md` in this mini-project's directory:
    1. Check off all objectives you believe you have demonstrated
    2. Indicate which objectives you are meeting for the first time (if any)
    3. Complete any relevant open-ended items
2. Push your changes to your centralized assignment repository on GitHub. 
3. Confirm that Dr. Dowling and your section TA are added as collaborators to your repository.
4. Submit your work in your next open mini-project assignment by including the following information in the text box:
    1. The title of the assignment: "Level 2 Data Wrangling: Recreate a gapminder Dataset"
    2. A link to the **directory** for this assignment in your centralized assignment repo
